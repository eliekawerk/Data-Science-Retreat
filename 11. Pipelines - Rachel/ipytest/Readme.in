# ipytest - unit tests in IPython notbeooks

Sometimes quick experiments in IPython grow large and you find yourself wanting
unit tests. This module aims to make testing code in IPython notebooks easy. At
its core, it offers a way to run [`pytest`](https://pytest.org) tests inside the
notebook environment. It is also designed to make the transfer of the tests into
proper python modules easy.

Installation: `pip install ipytest`

Features:

- support for [pytest](pytest.org) inside notebooks (with all bells and
  whistles)
- tight integration with IPython via magics and automatic code transforms

## Changes

- `0.4.0`: add support for automatic AST transforms, deprecated non pytest API.
  Currently in beta, use `ipytest==0.4.0b1`.
- `0.3.0`: change default pattern for `clean_tests` to match pytest discovery
- `0.2.2`: add support for assert rewriting with current pytest versions
- `0.2.1`: add ipython magics to simplify test execution
- `0.2.0`: support for using pytest inside notebooks
- `0.1.0`: support for running `unittest.FunctionTestCase`,
  `unittest.TestCases`, and `doctests`.

## Usage

For usage see the [example notebook](./Example.ipynb) or the documentation for
the core API below.

The suggested way to import `ipytest` is:

```python
import ipytest
import ipytest.magics

ipytest.config.rewrite_asserts = True
```

## Reference

### `%%run_pytest ...`

IPython magic that first executes the cell, then executes `run_pytest`.
Any arguments passed on the magic line be passed on to pytest.
To register the magics, run `import ipytest.magics` first.

For example:

```python
%%run_pytest -qq


def test_example():
    ...

```

### `%%run_pytest[clean] ...`

Same as the `%%run_pytest`, but cleans any previously found tests, i.e., only
tests defined in the current cell are executed.
To register the magics, run `import ipytest.magics` first.

.. autofunction:: ipytest.run

.. autofunction:: ipytest.clean_tests

.. autofunction:: ipytest.reload


### `ipytest.config`

Configure `ipytest`. The following settings are suported:

- `ipytest.config.rewrite_asserts`: enable ipython AST transforms to rewrite
  asserts, defaults to `False`.
- `ipytest.config.clean`: the patter used to clean variables, defaults to
  `[Tt]est*`.

## Development

To execute the unit tests of `ipytest` run

    pipenv sync --dev
    pipenv run test

Before commit execute `pipenv run precommit` to update the documentation,
format the code, and run tests.

## Legacy functionality

### `%%rewrite_asserts`

Rewrite any asserts in the current cell using pytest without running the tests.
To get best results run the tests with `run_pytest`.
To register the magics, run `import ipytest.magics` first.

For example::

```python
%%rewrite_asserts

def test_example():
    ...
```

.. autofunction:: ipytest.run_pytest

.. autofunction:: ipytest.run_tests

.. autofunction:: ipytest.collect_tests

.. autofunction:: ipytest.assert_equals

.. autofunction:: ipytest.get_assert_function

.. autofunction:: ipytest.unittest_assert_equals

## License

.. literalinclude:: License.md
